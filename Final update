#!/bin/bash
# Real-time CAAPI Dashboard with Spike Detection & Logging

LOG_FILE=""
BUCKET_MIN=60
SHOW_TOP=""
SPIKE_THRESHOLD=80
COLOR_OUTPUT=true
ALERT_LOG="caapi_spikes.log"
declare -a URL_PATTERNS
declare -a TIME_RANGES

# Colors
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; CYAN='\033[0;36m'; NC='\033[0m'

usage() {
    echo "Usage: $0 -f logfile [-u url_pattern] [-t start-end] [-b bucket_min] [-n top] [-s success_threshold] [-a alert_log] [--no-color] [-h]"
    echo ""
    exit 1
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -f) LOG_FILE="$2"; shift 2 ;;
        -u) URL_PATTERNS+=("$2"); shift 2 ;;
        -t) TIME_RANGES+=("$2"); shift 2 ;;
        -b) BUCKET_MIN="$2"; shift 2 ;;
        -n) SHOW_TOP="$2"; shift 2 ;;
        -s) SPIKE_THRESHOLD="$2"; shift 2 ;;
        -a) ALERT_LOG="$2"; shift 2 ;;
        --no-color) COLOR_OUTPUT=false; shift ;;
        -h) usage ;;
        *) echo "Unknown option $1"; usage ;;
    esac
done

[[ -z "$LOG_FILE" || ! -f "$LOG_FILE" ]] && echo "Invalid log file" && exit 1
[[ ${#URL_PATTERNS[@]} -eq 0 ]] && URL_PATTERNS=(".*")
[[ ${#TIME_RANGES[@]} -eq 0 ]] && TIME_RANGES=("0-23")
DEFAULT_TOP=10
[[ -z "$SHOW_TOP" ]] && [[ ${#URL_PATTERNS[@]} -eq 0 || "${URL_PATTERNS[0]}" == ".*" ]] && SHOW_TOP=$DEFAULT_TOP || SHOW_TOP=${#URL_PATTERNS[@]}
[[ "$COLOR_OUTPUT" == false ]] && RED='' GREEN='' YELLOW='' CYAN='' NC=''

URL_REGEX=$(IFS="|"; echo "${URL_PATTERNS[*]}")
TIME_RANGES_STR=$(IFS=","; echo "${TIME_RANGES[*]}")

AWK_SCRIPT=$(cat <<'EOF'
BEGIN{
    OFS="|"; split(times, tr, ",");
    alert_file=ARGV[2]; close(alert_file);
}

function in_time_range(hr){
    for(i in tr){ split(tr[i], t, "-"); if(hr >= t[1] && hr <= t[2]) return 1; }
    return 0;
}

function url_match(u){ return (u ~ urls); }

function color_code(status){
    if(status ~ /^2/) return green;
    else if(status ~ /^5/) return red;
    else if(status ~ /^4/) return yellow;
    else if(status == "") return red;
    else return cyan;
}

function log_spike(time,url,code,cnt,success_rate){
    if(success_rate<SPIKE_THRESHOLD || code==""){
        printf "%s|%s|%s|%d|%.2f%%|SPIKE\n", time,url,code,cnt,success_rate >> alert_file;
    }
}

function print_dashboard(){
    system("clear");
    print cyan "=== CAAPI Log Dashboard with Spike Detection ===" nc;
    printf "%-8s %-60s %-6s %-8s %-10s %-10s %-6s\n","Time","URL","Code","Count","Avg(ms)","Total","Spike";
    PROCINFO["sorted_in"]="@ind_str_asc";
    for(k in count_bucket){
        split(k,a,"|"); time=a[1]; url=a[2]; code=a[3];
        cnt=count_bucket[k]; avg=sum_bucket[k]/cnt;

        total_bucket=0; success_bucket=0; blank_bucket=0;
        for(st in bucket_status[url "|" time]){
            total_bucket+=bucket_status[url "|" time][st];
            if(st ~ /^2/) success_bucket+=bucket_status[url "|" time][st];
            if(st=="") blank_bucket+=bucket_status[url "|" time][st];
        }
        success_rate=(total_bucket>0)?(success_bucket*100/total_bucket):0;
        spike=(success_rate < SPIKE_THRESHOLD || blank_bucket>0) ? 1 : 0;

        log_spike(time,url,code,cnt,success_rate);

        col=color_code(code);
        spike_mark=(spike==1) ? RED"SPIKE"NC : "";
        printf "%-8s %-60s %s%-6s%s %-8d %-10.2f %-10d %-6s\n", time, url, col, code, nc, cnt, avg, total_bucket, spike_mark;
    }
}

{
    ts=$1; url=""; status=""; elapsed="";

    for(i=1;i<=NF;i++){
        if($i~/ReqURL:/){url=$i; sub(/ReqURL::?/,"",url);}
        if($i~/SBRespCode:/){status=$i; sub(/SBRespCode::?/,"",status);}
        if($i~/ElapsedTime:/){elapsed=$i; sub(/ElapsedTime::?/,"",elapsed);}
    }

    if(url=="") next;

    match(ts,/T([0-9]{2}):([0-9]{2})/, t);
    hr=t[1]+0; mn=t[2]+0;

    if(!in_time_range(hr)) next;
    if(!url_match(url)) next;

    bucket_mn=int(mn/bucket)*bucket;
    btime=sprintf("%02d:%02d", hr, bucket_mn);

    count_bucket[btime "|" url "|" status]++;
    sum_bucket[btime "|" url "|" status]+=elapsed;

    bucket_status[url "|" btime][status]++;
    leaderboard[url "|" status]++;
    leaderboard_sum[url "|" status]+=elapsed;

    print_dashboard();
}
EOF
)

./caapi_dashboard.sh -f /var/log/caapi.log -u "upload" -u "download" -t 9-17 -b 15 -s 85 -a /var/log/caapi_spike_alerts.log

# Run dashboard with spike logging
tail -F "$LOG_FILE" | awk -v bucket="$BUCKET_MIN" -v top="$SHOW_TOP" \
    -v urls="$URL_REGEX" -v times="$TIME_RANGES_STR" -v SPIKE_THRESHOLD="$SPIKE_THRESHOLD" \
    -v alert_file="$ALERT_LOG" \
    -v red="$RED" -v green="$GREEN" -v yellow="$YELLOW" -v cyan="$CYAN" -v nc="$NC" "$AWK_SCRIPT"
New Features

Alert log (-a <file>), default: caapi_spikes.log

SPIKE logged automatically if:

Success rate < threshold

Blank response code

Dashboard + alert log updated real-time

Fully parameterized:

-f → log file

-u → URL pattern(s)

-t → hour range(s)

-b → bucket minutes

-n → Top-N

-s → Spike threshold

-a → Alert log file

--no-color → disable color
