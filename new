#!/bin/bash

# Check if folder parameter is provided
if [ $# -eq 0 ]; then
    echo "‚ùå Error: Please provide a folder name as parameter"
    echo "Usage: $0 <folder_name>"
    echo "Example: $0 maven-deps"
    exit 1
fi

FOLDER_NAME="$1"

# Get current directory path
CURRENT_DIR=$(pwd)

# Base download directory in current path
BASE_DIR="$CURRENT_DIR/$FOLDER_NAME"

# List of Maven repository URLs
URLS=(
    "https://maven.repository.redhat.com/ga/org/optaplanner/optaplanner-bom/7.3.0.Final-redhat-1/"
)

# File extensions to download
EXTS=("pom" "jar" "md5" "sha1" "sha256" "sha512" "xml" "properties" "txt" "asc")

# Create base directory
echo "üìÅ Creating directory: $BASE_DIR"
mkdir -p "$BASE_DIR"

# Loop through URLs
for url in "${URLS[@]}"; do
    echo "üîç Checking $url"
    
    # Fetch the HTML index
    html=$(curl -s "$url")
    
    # Extract file links
    for ext in "${EXTS[@]}"; do
        links=$(echo "$html" | grep -oE "[a-zA-Z0-9._-]+\.$ext")
        for file in $links; do
            full_url="$url$file"
            
            echo "‚¨áÔ∏è  Downloading $file"
            # Download directly to base directory (no subfolders)
            curl -s -o "$BASE_DIR/$file" "$full_url"
            
            # Check if download was successful
            if [ -f "$BASE_DIR/$file" ]; then
                echo "‚úÖ Downloaded: $file"
            else
                echo "‚ùå Failed to download: $file"
            fi
        done
    done
done

echo "‚úÖ All downloads completed. Files saved in $BASE_DIR"
echo "üìÅ Files downloaded:"
ls -la "$BASE_DIR"



import os
import sys
import shutil

def copy_missing_leaf_folders(folder1, folder2, folder3):
    folder1_dirs = set()
    folder2_dirs = set()

    # Collect leaf folders from folder1
    for root, dirs, files in os.walk(folder1):
        if not dirs:  # leaf folder
            rel_path = os.path.relpath(root, folder1)
            folder1_dirs.add(rel_path)

    # Collect leaf folders from folder2
    for root, dirs, files in os.walk(folder2):
        if not dirs:  # leaf folder
            rel_path = os.path.relpath(root, folder2)
            folder2_dirs.add(rel_path)

    # Find leaf folders missing in folder2
    missing_dirs = folder1_dirs - folder2_dirs

    if missing_dirs:
        print(f"Copying {len(missing_dirs)} missing leaf folders from {folder1} ‚Üí {folder3}:\n")
        for rel_path in sorted(missing_dirs):
            src_path = os.path.join(folder1, rel_path)
            dest_path = os.path.join(folder3, rel_path)

            # Ensure parent directory exists in repo3
            os.makedirs(os.path.dirname(dest_path), exist_ok=True)

            # Copy folder recursively, excluding _remote.repository files
            if os.path.exists(dest_path):
                print(f"Skipping (already exists in repo3): {dest_path}")
            else:
                # Custom copy function to exclude _remote.repository files
                copy_folder_excluding_remote_repo(src_path, dest_path)
                print(f"Copied: {src_path} ‚Üí {dest_path} (excluding _remote.repository files)")
    else:
        print(f"No missing leaf folders. {folder2} already has all leaf folders from {folder1}.")

def copy_folder_excluding_remote_repo(src, dst):
    """
    Custom copy function that excludes _remote.repository files
    """
    # Create the destination directory
    os.makedirs(dst, exist_ok=True)
    
    # Copy all items from source to destination, excluding _remote.repository files
    for item in os.listdir(src):
        src_path = os.path.join(src, item)
        dst_path = os.path.join(dst, item)
        
        # Skip _remote.repository files
        if item == '_remote.repository':
            print(f"  Excluding: {src_path}")
            continue
            
        if os.path.isdir(src_path):
            # Recursively copy subdirectories
            shutil.copytree(src_path, dst_path, 
                          ignore=shutil.ignore_patterns('_remote.repository'))
        else:
            # Copy files
            shutil.copy2(src_path, dst_path)

if __name__ == "__main__":
    if len(sys.argv) != 4:
        print(f"Usage: python {sys.argv[0]} <folder1> <folder2> <folder3>")
        sys.exit(1)

    folder1 = sys.argv[1]
    folder2 = sys.argv[2]
    folder3 = sys.argv[3]

    copy_missing_leaf_folders(folder1, folder2, folder3)
